package com.animal;

import org.datavec.api.io.labels.ParentPathLabelGenerator;
import org.datavec.api.split.FileSplit;
import org.datavec.api.split.InputSplit;
import org.datavec.image.recordreader.ImageRecordReader;
import org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator;
import org.deeplearning4j.nn.api.OptimizationAlgorithm;
import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.inputs.InputType;
import org.deeplearning4j.nn.conf.layers.ConvolutionLayer;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.optimize.api.TrainingListener;
import org.nd4j.evaluation.classification.Evaluation;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.dataset.api.iterator.DataSetIterator;
import org.nd4j.linalg.learning.config.Adam;
import org.nd4j.linalg.lossfunctions.LossFunctions;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class AnimalTrainer {

    private static final int IMAGE_HEIGHT = 100;
    private static final int IMAGE_WIDTH = 100;
    private static final int IMAGE_CHANNELS = 3;
    private static final int BATCH_SIZE = 32;
    private static final int EPOCHS = 5;
    private static final String MODEL_PATH = "animal_model.zip";
    private static final String TRAIN_DATA_PATH = "training_data/dataset/train";

    public static void main(String[] args) throws IOException {
        // Îç∞Ïù¥ÌÑ∞ÏÖã ÎîîÎ†âÌÜ†Î¶¨
        File trainData = new File(TRAIN_DATA_PATH);
        ParentPathLabelGenerator labelMaker = new ParentPathLabelGenerator();
        FileSplit fileSplit = new FileSplit(trainData, new String[]{"jpg", "png"}, new Random(123));
        
        // Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        ImageRecordReader recordReader = new ImageRecordReader(IMAGE_HEIGHT, IMAGE_WIDTH, IMAGE_CHANNELS, labelMaker);
        recordReader.initialize(fileSplit);

        // ÌÅ¥ÎûòÏä§ ÎùºÎ≤® Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
        List<String> labels = recordReader.getLabels();
        int outputClasses = labels.size();
        System.out.println("Detected classes: " + labels);

        DataSetIterator trainIter = new RecordReaderDataSetIterator(recordReader, BATCH_SIZE, 1, outputClasses);

        // Í∏∞Ï°¥ Î™®Îç∏ Î°úÎìú ÎòêÎäî ÏÉà Î™®Îç∏ ÏÉùÏÑ±
        MultiLayerNetwork model;
        File modelFile = new File(MODEL_PATH);

        if (modelFile.exists()) {
            // Í∏∞Ï°¥ Î™®Îç∏ Î°úÎìú
            model = MultiLayerNetwork.load(modelFile, true);
            System.out.println("Loaded existing model.");
        } else {
            // ÏÉà Î™®Îç∏ ÏÉùÏÑ±
            model = createModel(outputClasses);
            System.out.println("Created new model.");
        }

        // Î™®Îç∏ ÌïôÏäµ
        System.out.println("üöÄ Training started...");
        model.fit(trainIter, EPOCHS);

        // Î™®Îç∏ Ï†ÄÏû•
        model.save(new File(MODEL_PATH), true);
        System.out.println("‚úÖ Model saved successfully: " + MODEL_PATH);
    }

    private static MultiLayerNetwork createModel(int outputClasses) {
        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
            .seed(123)
            .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)
            .updater(new Adam(0.001))
            .list()
            .layer(0, new ConvolutionLayer.Builder(3, 3)
                    .nIn(IMAGE_CHANNELS)
                    .nOut(32)
                    .activation(Activation.RELU)
                    .weightInit(WeightInit.XAVIER)
                    .build())
            .layer(1, new DenseLayer.Builder().nOut(100).activation(Activation.RELU).build())
            .layer(2, new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
                    .nOut(outputClasses)
                    .activation(Activation.SOFTMAX)
                    .build())
            .setInputType(InputType.convolutional(IMAGE_HEIGHT, IMAGE_WIDTH, IMAGE_CHANNELS))
            .build();

        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();
        return model;
    }
}





package com.animal;

import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.util.ModelSerializer;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.Nd4j;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;

public class AnimalClassifier {

    private static final String MODEL_PATH = "animal_model.zip";
    private static final int IMAGE_HEIGHT = 100;
    private static final int IMAGE_WIDTH = 100;
    private static final int IMAGE_CHANNELS = 3;

    public static void main(String[] args) throws IOException {
        if (args.length == 0) {
            System.out.println("Usage: java AnimalClassifier <image_path>");
            return;
        }

        String imagePath = args[0];
        File modelFile = new File(MODEL_PATH);
        if (!modelFile.exists()) {
            System.out.println("Error: Model file not found!");
            return;
        }

        // Î™®Îç∏ Î°úÎìú
        MultiLayerNetwork model = ModelSerializer.restoreMultiLayerNetwork(modelFile);
        List<String> labels = model.getLabels();
        System.out.println("Loaded model with labels: " + labels);

        // Ïù¥ÎØ∏ÏßÄ Î°úÎìú Î∞è Ï†ÑÏ≤òÎ¶¨
        INDArray imageArray = preprocessImage(imagePath);

        // ÏòàÏ∏° ÏàòÌñâ
        INDArray output = model.output(imageArray);
        int predictedClass = output.argMax(1).getInt(0);

        System.out.println("Predicted class: " + labels.get(predictedClass));
    }

    private static INDArray preprocessImage(String imagePath) throws IOException {
        BufferedImage image = ImageIO.read(new File(imagePath));
        BufferedImage resized = new BufferedImage(IMAGE_WIDTH, IMAGE_HEIGHT, BufferedImage.TYPE_INT_RGB);
        resized.getGraphics().drawImage(image, 0, 0, IMAGE_WIDTH, IMAGE_HEIGHT, null);

        int[] data = resized.getRGB(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT, null, 0, IMAGE_WIDTH);
        float[] floatData = new float[data.length * IMAGE_CHANNELS];
        for (int i = 0; i < data.length; i++) {
            int pixel = data[i];
            floatData[i * 3] = ((pixel >> 16) & 0xFF) / 255.0f;
            floatData[i * 3 + 1] = ((pixel >> 8) & 0xFF) / 255.0f;
            floatData[i * 3 + 2] = (pixel & 0xFF) / 255.0f;
        }

        return Nd4j.create(floatData, new int[]{1, IMAGE_CHANNELS, IMAGE_HEIGHT, IMAGE_WIDTH});
    }
}








































